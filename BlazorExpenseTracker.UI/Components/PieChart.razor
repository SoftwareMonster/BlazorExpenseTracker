@inject IExpenseService ExpenseService

<p>@Message</p>
@if (expenses == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <ChartJsPieChart @ref="@_pieChartJs" Config="@_config" Width="600" Height="300"></ChartJsPieChart>
    <div class="container">
        <div class="row">
            <div class="col-1">
                <span>Income</span>
            </div>
            <div class="col-2">
                <span>Expense</span>
            </div>
            <div class="col-3">
                <span>Total</span>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <span style="color: green; font-weight: 700;">@string.Format($"${GetTotalIncome().ToString()}")</span>
            </div>
            <div class="col-2">
                <span style="color: red; font-weight: 700;">@string.Format($"${GetTotalExpenses().ToString()}")</span>
            </div>
            <div class="col-3">
                <span style="color: @GetTotalColor(); font-weight: 700;">@string.Format($"${GetTotal().ToString()}")</span>
            </div>
        </div>
    </div>
}

@code {
    public IEnumerable<Expense> expenses { get; set; }
    public string Message { get; set; }
    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            expenses = await ExpenseService.GetAllExpenses();
        }
        catch (Exception e)
        {
            Message = "Algo fue mal..." + e.Message;
        }
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Expenses"
                }
            }
        };
        _config.Options.Responsive = true;
        _config.Options.Animation = new ArcAnimation
        {
            AnimateRotate = true,
            AnimateScale = true
        };
        _config.Data.Labels.AddRange(expenses.Select(c => c.Category.Name).Distinct().ToArray());
        var pieSet = new PieDataset
        {
            BackgroundColor = new[]
            {
                ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()
            },
            BorderWidth = 0,
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        pieSet.Data.AddRange(expenses.GroupBy(e => e.CategoryId).Select(ec => ec.Sum(c => Convert.ToDouble(c.Amount))).ToArray());
        _config.Data.Datasets.Add(pieSet);
    }

    protected decimal GetTotalExpenses()
    {
        return expenses
            .Where(c => c.ExpenseType == ExpenseType.Expense)
            .GroupBy(i => 1)
            .Select(g => new
            {
                Amount = g.Sum(i => i.Amount)
            }).FirstOrDefault().Amount;
    }

    protected decimal GetTotalIncome()
    {
        return expenses
            .Where(c => c.ExpenseType == ExpenseType.Income)
            .GroupBy(i => 1)
            .Select(g => new
            {
                Amount = g.Sum(i => i.Amount)
            }).FirstOrDefault().Amount;
    }

    protected decimal GetTotal()
    {
        return GetTotalIncome() - GetTotalExpenses();
    }

    protected string GetTotalColor()
    {
        return GetTotal() > 0 ? "green" : "red";
    }

}